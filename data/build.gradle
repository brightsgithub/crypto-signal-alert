plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "com.owusu.cryptosignalalert.data.MyTestRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "version"
    productFlavors {
        prod {
            dimension "version"
            buildConfigField 'String', 'BASE_URL', '"https://raw.githubusercontent.com/brightsgithub/"'
        }
        mockServer {
            dimension "version"
            buildConfigField 'String', 'BASE_URL', '"http://localhost:8080/brightsgithub/"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    var ktor_version = "2.0.3"

    // Koin for injection
    implementation 'io.insert-koin:koin-core:2.0.1'
    implementation 'io.insert-koin:koin-android:2.0.1'

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation project(path: ':domain')
    androidTestImplementation project(':testutils')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.android.support:multidex:1.0.3'

    // Ktor - https://ktor.io/docs/getting-started-ktor-client.html#add-dependencies

    // ktor-client-core contains core Ktor client functionality.
    api("io.ktor:ktor-client-core:$ktor_version") // api so Presentation module can see this
    // CIO is a fully asynchronous coroutine-based engine that can be used for both JVM and Android platforms.
    //implementation("io.ktor:ktor-client-cio:2.0.3")
    // Engine dependency
    // Engines are used to process network requests. Note that a specific platform may require a
    // specific engine that processes network requests.-
    // Here I'm using the Android Engine
    api("io.ktor:ktor-client-android:$ktor_version") // api so Presentation module can see this
    // Many applications require common functionality that is out of scope of the application logic.
    // This could be things like logging, serialization, or authorization.
    // All of these are provided in Ktor by means of what we call Plugins.
    // Here Im using the Logging plug in
    api("io.ktor:ktor-client-logging-jvm:$ktor_version")
    // Here im using the Serialization Plugin to serialize/deserialize JSON data
    api("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")

    api("io.ktor:ktor-client-content-negotiation:$ktor_version")



}